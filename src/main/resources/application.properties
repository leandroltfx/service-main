# configurando o servidor principal como um service discovery usando o eureka
# serve para descobrir dinamicamente as outras instâncias de serviços que compõem a nossa aplicação distribuída
# conecta novos serviços criados (ou desabilitá-los) e concentrar essas informações (urls, endpoints) em um único local
# dessa maneira os serviços que compõem a teia de microsserviços conseguirão se encontrar sem que se chamem diretamente
# um ao outro

# o service discovery (esta aplicação) terá uma lista de serviços disponíveis com seus respectivos nomes, portanto
# se um microsserviço de login quiser chamar o de mensageria ele o fará por meio desse nome que está na lista.

# a lista pode ser visualizada em localhost:8888

spring.application.name=service-main

# repositório do git em que estão armazenadas as configurações centrais
spring.cloud.config.server.git.uri=https://github.com/leandroltfx/config-server.git

# faz o clone do repositório especificado acima ao iniciar
spring.cloud.config.server.git.clone-on-start=true

# Define o(s) diretório(s) dentro do repositório onde os arquivos de configuração estão localizados
spring.cloud.config.server.git.searchPaths=config

# Faz com que o EurekaServer não se registre nele mesmo (sendo papel apenas dos clients)
eureka.client.register-with-eureka=false

# Faz com que o EurekaServer não busque o registro dele mesmo
eureka.client.fetchRegistry=false

# Onde os serviços estarão sendo executados
eureka.instance.hostname=localhost

# Desabilita a preservação automática do servidor Eureka (útil em ambiente de desenvolvimento/testes)
eureka.server.enableSelfPreservation=false

# porta em que o servidor principal ira rodar
server.port=8888

# dessa forma quando os microsserviços forem recuperar informações de configuração do servidor main
# eles terão que bater no endpoint "/config"
spring.cloud.config.server.prefix=/config
